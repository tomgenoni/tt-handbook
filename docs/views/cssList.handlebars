<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Utilities</title>
    <link rel="stylesheet" href="/css/tui.css">
    <link rel="stylesheet" href="/css/utils.css">
    <style>
        .filter-active .entry {
            display: none !important;
        }

        .filter-active .match-class,
        .filter-active .match-property,
        .filter-active .match-value {
            display: flex !important;
        }

        .match-class .hit,
        .match-property .hit,
        .match-value .hit {
            color: #2db783;
        }
    </style>
</head>

<body>
    <div class="ph3 pv4 s:ph0">
        <h1 class="tp-title-2 mb4 center mw7">Class List</h1>
        <div class="center mw7 flex items-center">
            <div class="flex-auto mr3">
                <label class="tp-label" for="filter">Starts with</label>
                <input type="text" class="tp-text-input tp-text-input--small" id="filter" name="filter" />
            </div>
            <div class="flex-none">
                <label class="tp-label">Filter by</label>
                <select id="filter-type" class="tp-select tp-select--small">
                    <option value="class">class</option>
                    <option selected value="property">property</option>
                    <option value="value">value</option>
                </select>
            </div>
        </div>
        <div class="longread center mw7 mv3">
            <div class="flex mb3 bb bw-2 b--gray-300">
                <code class="w-2/5 pv2 s:ph3 black-300">class</code>
                <code class="w-3/5 pv2 s:ph3">
                <div>
                    <span class="black-300">property</span>:
                    <span class="black-300">value</span>;
                </div>
                </code>
            </div>
            {{#each this}} {{{cssList}}} {{/each}}
        </div>
    </div>

    <script>
        const dataClass = document.querySelectorAll(".filter-class");
        const dataProperty = document.querySelectorAll(".filter-property");
        const dataValue = document.querySelectorAll(".filter-value");

        const body = document.querySelector("body");

        const filterInput = document.querySelector("#filter");
        const filterSelect = document.querySelector("#filter-type");
        const enties = document.querySelectorAll(".entry");

        function purgeMatches() {
            const hits = document.querySelectorAll(".hit");
            enties.forEach(function (i) {
                i.classList.remove("match-class");
                i.classList.remove("match-property");
                i.classList.remove("match-value");
            });
            hits.forEach(function (i) {
                i.classList.remove("hit");
            });
            body.classList.remove("filter-active");
        }

        function addFilterClass(arr, term, className) {
            arr.forEach(function (i) {
                let classStr = i.innerHTML;
                let entry = i.closest(".entry");

                if (classStr.startsWith(term)) {
                    entry.classList.add(className);
                    i.classList.add("hit");
                }
            });
        }

        function filterClasses(term, type) {
            purgeMatches();

            if (term != "") {
                body.classList.add("filter-active");

                if (type == "class") {
                    addFilterClass(dataClass, term, "match-class");
                } else if (type == "property") {
                    addFilterClass(dataProperty, term, "match-property");
                } else {
                    addFilterClass(dataValue, term, "match-value");
                }
            }
        }

        filterInput.addEventListener("keyup", function () {
            let term = this.value;
            let type = filterSelect.value;
            filterClasses(term, type);
        })

        filterSelect.addEventListener("change", function () {
            let term = filterInput.value;
            let type = this.value;
            filterClasses(term, type);
        })

    </script>


    <script src="https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js"></script>
    <script>

        var clipboard = new ClipboardJS('.clipboard', {
            target: function (trigger) {
                return trigger;
            }
        });

        clipboard.on('success', function (e) {
            e.trigger.classList.add("success")
            setTimeout(function () {
                e.trigger.classList.remove("success")
            }, 2000)
            e.clearSelection();
        });

    </script>


</body>

</html>